  OntoQuest API includes two parts: Basic functions and extended functions. Basic functions are system-defined functions. They are either the implementation of the methods used in query language, or part of more complex functions. Extended functions are user-defined functions. The extended functions are designed in a fashion that they can be added/removed/changed without touching system codes. 
  
  PART I: BASIC FUNCTIONS
  
  /**
   * Given a knowledge base (top-level ontology) name, find its ID.
   * @param name knowledge base name
   * @param context query context
   * @return knowledge base id
   * @throws OntoquestException
   */
  public int getKnowledgeBaseID(String name, Context context) throws OntoquestException;

  /**
   * Given a pair of (rtid, rid), find the resource's name.
   * @param rtid resource type id, e.g. id of PrimitiveClass, id of UnionClass
   * @param rid id of the resource
   * @param context
   * @return resource name
   * @throws OntoquestException
   */
  public String getName(int rtid, int rid, Context context) throws OntoquestException;
  
  /**
   * Given a resource (rid, rtid), find the value of property (name = pname).
   * @param rid id of the resource
   * @param rtid resource type id
   * @param pname property name
   * @param context query context
   * @param varList variable list to bind to the result. One String variable is expected.
   * @return a set of Strings. 
   * @throws OntoquestException
   */
  public ResourceSet getPropertyValue(int rid, int rtid, String pname, 
      Context context, List<Variable> varList) throws OntoquestException;

  /**
   * scan 3 kinds of relationships between classes: subClassOf, disjointWith, equivalentClass
   * @param kbid knowledge base id
   * @param context query context
   * @param varList variable list to be bound by results.
   * @return a cursor to iterate the set of relationships (edges).
   * @throws OntoquestException
   */
  public ResourceSet scanClassRelationships(int kbid, Context context, List<Variable> varList)
      throws OntoquestException;

  /**
   * scan 3 kinds of relationships between properties: subPropertyOf, inverseOf, equivalentProperty
   * @param kbid knowledge base id
   * @param context query context
   * @param varList variable list to be bound by results.
   * @return a cursor to iterate the set of relationships (edges).
   * @throws OntoquestException
   */
  public ResourceSet scanPropertyRelationships(int kbid, Context context,
      List<Variable> varList) throws OntoquestException;
  
  /**
   * scan all relationships (subject property object), including system-defined and user-defined.
   * System-defined relationships are those that are defined by OWL specifications, for
   * example, subClassOf relationship.
   * @param kbid knowledge base (ontology) ids.
   * @param context the query context
   * @return A ResultSet that contains all relationships. Each row in the resultSet is a pentuple:
   * (subjectID, subjectResourceTypeID, propertyID, objectID, objectResourceTypeID). The data type of each row is: 
   * (int int int int int)
   */
  public ResourceSet scanAllRelationships(int[] kbid, Context context, List<Variable> varList, boolean isWeighted)
      throws OntoquestException;
  
  /**
   * Given a term (nodeName), find all matched resources. Please notice one term may
   * match to 0 or more resources. Only exact matches are returned.
   * @param nodeName the query term. 
   * @param kbid the IDs of the knowledge bases to be searched.
   * @param context query context
   * @param varList variable list. Expect 2 integer variable in the list.
   * @return a set of resources id pairs (rid, rtid).
   * @throws OntoquestException
   */
  public ResourceSet searchAllIDsByName(String nodeName, int[] kbid, Context context, List<Variable> varList)
    throws OntoquestException;

  /**
   * Given a string, to find possible matches with class name, individual name, 
   * property name or literal in all knowledge bases.
   * @param strToSearch the string to search
   * @param context
   * @param varList the list of variables to bind
   * @return
   * @throws OntoquestException
   */
  public ResourceSet searchName(String strToSearch, Context context, List<Variable> varList) throws OntoquestException;

  /**
   * Given a string, to find possible matches with class name, individual name, property name or literal.
   * The results are ordered by edit distance.
   * @param strToSearch the string to search
   * @param kbid IDs of the knowledge base (ontology) to search. Search all knowledge bases if kbid is null or empty.
   * @param context query context.
   * @param varList the list of variables to bind
   * @param resultLimit max number of results to return. return all results if resultLimit = 0.
   * @param useNegation find the strings that DO NOT match the input. Default value is false.
   * @param searchType a flag to indicate which type(s) of resources to search. The definitions are:
   * <UL><LI>If searchType & MASK_SEARCH_CLASS(1) > 0, classes are searched. 
   * <LI>If searchType & MASK_SEARCH_INSTANCE (2) > 0, instances are searched. 
   * <LI>If searchType & MASK_SEARCH_PROPERTY (4) > 0, properties are searched. 
   * <LI>If searchType & MASK_SEARCH_LITERAL (8) > 0, literals are searched. 
   * <LI>If searchType & (MASK_SEARCH_CLASS|MASK_SEARCH_INSTANCE|MASK_SEARCH_PROPERTY|MASK_SEARCH_LITERAL)=0, 
   * the searchType is invalid. An exception is thrown.
   * </UL>
   * <BR>For example,
   * <UL> <LI>searchType = 1 -> search classes only
   * <LI>searchType = 3 -> search both classes and instances
   * <LI>searchType = 15 -> search all categories (classes, instances, properties, literals)
   * <LI>searchType = 11 -> search classes, instances and literals
   * </UL>
   * @param maxEditDistance maximum edit distance between result and query. No limit if the value is equal or less than 0. 
   * @return a resource set containing matched strings. It contains only one column with type string.
   * @throws OntoquestException
   */
  public ResourceSet searchName(String strToSearch, int[] kbid, Context context, 
      List<Variable> varList, int resultLimit, boolean useNegation, int searchType, int maxEditDistance) 
    throws OntoquestException;

  /**
   * Given a string, search the knowledge base using LIKE operator. The match is 
   * case-insensitive. This function should replace searchName in near future.
   * @param strToSearch the string to search.
   * @param kbid the knowledge base to search. If 0, search all knowledge bases.
   * @param prefLabel if true, prefer to use the class' rdfs:label property as its name.
   * if false, just use class' name. In some ontologies, e.g. SAO, class' name is actually 
   * an id. The real name is its rdfs:label field.
   * @param searchType a flag to indicate which type(s) of resources to search. The definitions are:
   * <UL><LI>If searchType & MASK_SEARCH_CLASS(1) > 0, classes are searched. 
   * <LI>If searchType & MASK_SEARCH_INSTANCE (2) > 0, instances are searched. 
   * <LI>If searchType & MASK_SEARCH_PROPERTY (4) > 0, properties are searched. 
   * <LI>If searchType & MASK_SEARCH_LITERAL (8) > 0, literals are searched. 
   * <LI>If searchType & (MASK_SEARCH_CLASS|MASK_SEARCH_INSTANCE|MASK_SEARCH_PROPERTY|MASK_SEARCH_LITERAL)=0, 
   * the searchType is invalid. An exception is thrown.
   * </UL>
   * <BR>For example,
   * <UL> <LI>searchType = 1 -> search classes only
   * <LI>searchType = 3 -> search both classes and instances
   * <LI>searchType = 15 -> search all categories (classes, instances, properties, literals)
   * <LI>searchType = 11 -> search classes, instances and literals
   * </UL>
   * @param context query context.
   * @param varList the list of variables to bind
   * @return
   * @throws OntoquestException
   */
  public ResourceSet searchNameLike(String strToSearch, int kbid, boolean prefLabel, 
      int searchType, Context context, List<Variable> varList) throws OntoquestException;

  /**
   * Similar to searchName, except that this method only finds names start with strToSearch.
   * @param strToSearch
   * @param kbid
   * @param context
   * @param varList
   * @param resultLimit
   * @param useNegation
   * @param searchType
   * @param maxEditDistance
   * @return
   * @throws OntoquestException
   */
  public ResourceSet searchNameStartWith(String strToSearch, int[] kbid, Context context, 
      List<Variable> varList, int resultLimit, boolean useNegation, int searchType, int maxEditDistance) 
    throws OntoquestException;

  /**
   * Search possible match in class name, property name, individual name or literal.
   * @param strToSearch the input string to search
   * @param kbid IDs of the knowledge bases to search
   * @param context query context
   * @param varList variables to be bound
   * @param resultLimit max number of results to return. return all results if resultLimit = 0.
   * @param useNegation find the strings that DO NOT match the input. Default value is false.
   * @param searchType @see {@link #searchName(String, int[], Context, List, int, boolean, int)}
   * @return a resource set containing matched strings. It contains only one column with type string.
   * @throws OntoquestException
   */
  public ResourceSet searchNameRegex(String strToSearch, int[] kbid, Context context, 
      List<Variable> varList, int resultLimit, boolean useNegation, int searchType) throws OntoquestException;

  /**
   * list all knowledge bases names and IDs.
   * @param context query context
   * @param varList the variables to bind to the results
   * @return a ResourceSet of (int, string). The first column is the ID of
   * knowledge base (kbid), the second is the kb's name.
   * @throws OntoquestException
   */
  public ResourceSet listKnowledgeBases(Context context, List<Variable> varList) throws OntoquestException;

  /**
   * list all top-level resources in subClassOf hierarchy. 
   * @param kbid the knowledge base id
   * @param excludeOWLThing if true, don't consider owl:Thing as root.
   * @param prefLabel if true, prefer to use the class' rdfs:label property as its name.
   * if false, just use class' name. In some ontologies, e.g. SAO, class' name is actually 
   * an id. The real name is its rdfs:label field.
   * @param context query context
   * @return a ResourceSet of nodes. Each row includes three values: rid, rtid, and label.
   * The data type is (int, int, String). 
   * @throws OntoquestException
   */
  public ResourceSet listRootResources(int kbid, boolean excludeOWLThing, 
      boolean prefLabel, Context context, List<Variable> varList) throws OntoquestException;

PART II: EXTENDED FUNCTIONS

  /**
   * Estimate the count of neighbors. 
   * @param terms the query terms
   * @param kbid the knowledge base id
   * @param includedProperties the properties to be included. NULL or empty array means including all properties
   * @param isSynonymIncluded the properties to be excluded.
   * @param edgeDirection one of EDGE_INCOMING, EDGE_OUTGOING, and EDGE_BOTH
   * @param excludeHiddenRelationship if true, no hidden relationships in the result.
   * @param level the level of neighbors (descendants/ancestors). If 0, include all levels of neighbors.
   * @param allowSubproperties if true, include the neighbors which are connected by a subproperty of the includedProperties.
   */
  public EstimateNeighborCount(String[] terms, int kbid, 
      String[] includedProperties, boolean isSynonymIncluded, int edgeDirection, 
      boolean excludeHiddenRelationship, int level, boolean allowSubproperties);
      
  /**
   * Get the Least Common Ancestor (LCA) of input nodeIDs in the Directed Acyclic Graph (DAG) 
   * in which the edges are connected by the pid.
   * @param nodeIDs array of int[2]. Each int[2] represents a node id, the first 
   * int is rid, and the second id rtid.
   * @param pid the id of the property for the DAG.
   * @param allowSubproperties If true, the DAG includes subproperties of the pid.
   * @param excludeHiddenRelationship If true, no hidden edges in the DAG.
   */
  public GetDagLCA(int[][] nodeIDs, int pid, boolean allowSubproperties, boolean excludeHiddenRelationship);
  
  /**
   * Get the path between node1 (rid1, rtid1) and node2 (rid2, rtid2) in the DAG.
   * @param rid1 resource id of node 1
   * @param rtid1 resource type id of node 1
   * @param rid2 resource id of node 2
   * @param rtid2 resource type id of node 2
   * @param pid the property id
   * @param allowSubproperties If true, the DAG includes subproperties of the pid.
   * @param excludeHiddenRelationship If true, no hidden edges in the DAG.
   */
  public GetDagPath(int rid1, int rtid1, int rid2, int rtid2, int pid,
                      boolean allowSubproperties, boolean excludeHiddenRelationship);

  /**
   * Get neighbors of the input node. Exclude hidden edges. The backend routine will decide whether a DAG index
   * should be used in the search.
   * @param term the input term node
   * @param kbid the knowledge base id
   * @param includedProperties the properties to be included. NULL or empty array means including all properties
   * @param excludedProperties the properties to be excluded.
   * @param isSynonymIncluded If true, search the term as a synonym as well.
   * @param edgeDirection one of EDGE_INCOMING, EDGE_OUTGOING, EDGE_BOTH
   * @param level the level of neighbors (descendants/ancestors). If 0, include all levels of neighbors.
   * @param allowSubproperties if true, include the neighbors which are connected by a subproperty of the includedProperties.
   */
  public GetNeighbors(String term, int kbid, 
      String[] includedProperties, String[] excludedProperties, boolean isSynonymIncluded, 
      int edgeDirection, int level, boolean allowSubproperties);

  /**
   * Get neighbors of the input nodes. Exclude hidden edges.
   * @param terms the input terms
   * @param kbid the knowledge base id
   * @param includedProperties the properties to be included. NULL or empty array means including all properties
   * @param excludedProperties the properties to be excluded.
   * @param isSynonymIncluded If true, search the term as a synonym as well.
   * @param edgeDirection one of EDGE_INCOMING, EDGE_OUTGOING, EDGE_BOTH
   * @param level the level of neighbors (descendants/ancestors). If 0, include all levels of neighbors.
   * @param allowSubproperties if true, include the neighbors which are connected by a subproperty of the includedProperties.
   */
  public GetNeighbors(String[] terms, int kbid, 
      String[] includedProperties, String[] excludedProperties, boolean isSynonymIncluded, 
      int edgeDirection, int level, boolean allowSubproperties);

  /**
   * Get neighbors of the input nodes.
   * @param terms the input terms
   * @param kbid the knowledge base id
   * @param includedProperties the properties to be included. NULL or empty array means including all properties
   * @param excludedProperties the properties to be excluded.
   * @param isSynonymIncluded If true, search the term as a synonym as well.
   * @param edgeDirection one of EDGE_INCOMING, EDGE_OUTGOING, EDGE_BOTH
   * @param excludeHiddenRelationship If true, exclude hidden relationships.
   * @param isClassOnly If true, only fetch neighbors which are classes.
   * @param level the level of neighbors (descendants/ancestors). If 0, include all levels of neighbors.
   * @param allowSubproperties if true, include the neighbors which are connected by a subproperty of the includedProperties.
   */
  public GetNeighbors(String[] terms, int kbid, 
      String[] includedProperties,  String[] excludedProperties, boolean isSynonymIncluded, int edgeDirection, 
      boolean excludeHiddenRelationship, boolean isClassOnly, int level, boolean allowSubproperties);

  /**
   * Get neighbors of the input node identified by id (rid, rtid)
   * @param rid resource id. A pair of (rid, rtid) identifies a node.
   * @param rtid resource type id
   * @param kbid knowledge base id
   * @param includedProperties the properties to be included. NULL or empty array means including all properties
   * @param excludedProperties the properties to be excluded.
   * @param edgeDirection one of EDGE_INCOMING, EDGE_OUTGOING, EDGE_BOTH
   * @param excludeHiddenRelationship If true, exclude hidden relationships.
   * @param isClassOnly If true, only fetch neighbors which are classes.
   * @param level the level of neighbors (descendants/ancestors). If 0, include all levels of neighbors.
   * @param allowSubproperties if true, include the neighbors which are connected by a subproperty of the includedProperties.
   */
  public GetNeighbors(int rid, int rtid, int kbid, 
      String[] includedProperties, String[] excludedProperties, int edgeDirection, 
      boolean excludeHiddenRelationship, boolean isClassOnly, int level, boolean allowSubproperties);

  /**
   * Get neighbors of the input nodes.
   * @param nodeIDs array of int[2]. Each int[2] represents a node id, the first 
     * int is rid, and the second id rtid.
   * @param kbid knowledge base id
   * @param includedProperties the properties to be included. NULL or empty array means including all properties
   * @param excludedProperties the properties to be excluded.
   * @param edgeDirection one of EDGE_INCOMING, EDGE_OUTGOING, EDGE_BOTH
   * @param excludeHiddenRelationship If true, exclude hidden relationships.
   * @param isClassOnly If true, only fetch neighbors which are classes.
   * @param level the level of neighbors (descendants/ancestors). If 0, include all levels of neighbors.
   * @param allowSubproperties if true, include the neighbors which are connected by a subproperty of the includedProperties.
   */
  public GetNeighbors(int[][] nodeIDs, int kbid,
      String[] includedProperties, String[] excludedProperties, int edgeDirection, 
      boolean excludeHiddenRelationship, boolean isClassOnly, int level, boolean allowSubproperties);

  /**
   * Get subclasses of input nodes.
   * @param terms the list of terms
   * @param kbid knowledge base id
   * @param level the level of subclasses to fetch
   * @param namedClassOnly If true, get primitive classes only
   */
  public GetSubClasses(String[] terms, int kbid, int level, boolean namedClassOnly);
  
  /**
   * Get subclasses of input node (rid, rtid)
   * @param rid
   * @param rtid
   * @param kbid the id of the knowledge base to search if it is greater than 0. 
   * 0 means the same knowledge base as (rid, rtid) node. A negative number (e.g. -1)
   * means all knowledge bases.
   * @param level return children up to <code>level</code>. 0 means children at all levels.
   */
  public GetSubClasses(int rid, int rtid, int kbid, int level, boolean namedClassOnly);

  /**
   * Get superclasses of input nodes.
   * @param terms the list of terms
   * @param kbid knowledge base id
   * @param level the level of superclasses to fetch
   * @param namedClassOnly If true, get primitive classes only
   */
  public GetSuperClasses(String[] terms, int kbid, int level, boolean namedClassOnly);
  
  /**
   * Get superclasses of input node (rid, rtid)
   * @param rid
   * @param rtid
   * @param kbid the id of the knowledge base to search if it is greater than 0. 
   * 0 means the same knowledge base as (rid, rtid) node. A negative number (e.g. -1)
   * means all knowledge bases.
   * @param level return children up to <code>level</code>. 0 means children at all levels.
   */
  public GetSuperClasses(int rid, int rtid, int kbid, int level, boolean namedClassOnly);

 /**
  * Given a list of nodes, find the center piece graph.
  * @param graph
  * @param maxPathLen
  * @param budget
  * @param queryNodes set of query nodes with size Q. For node i, i = 0,...,Q-1,
  * queryNodes[i][0] is its rid, queryNodes[i][1] is its rtid.
  */
  public GetCenterPieceSubgraph(Graph graph, int maxPathLen, int budget, int[][] queryNodes);
